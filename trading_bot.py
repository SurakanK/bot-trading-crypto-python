import os
import pandas as pd
import numpy as np
from binance.client import Client
from binance.enums import SIDE_BUY, SIDE_SELL, ORDER_TYPE_MARKET
import xgboost as xgb
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import ta
from dotenv import load_dotenv
import time
from datetime import datetime, timedelta
import joblib
import pathlib
import json
from scipy import stats
import pickle
import warnings

# ‡πÇ‡∏´‡∏•‡∏î environment variables ‡πÅ‡∏•‡∏∞ config
load_dotenv()

def load_config():
    """‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå config.json"""
    try:
        with open('config.json', 'r') as f:
            return json.load(f)
    except Exception as e:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î config.json: {str(e)}")
        return None

CONFIG = load_config()

class TradingBot:
    def __init__(self):
        if CONFIG is None:
            raise Exception("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ö‡∏≠‡∏ó‡πÑ‡∏î‡πâ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå config.json")
            
        self.symbol = CONFIG['trading']['symbol']
        self.interval = CONFIG['trading']['interval']
        self.use_testnet = CONFIG['trading']['use_testnet']
        self.num_models = CONFIG['model']['num_models']
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î
        self.SIDE_BUY = SIDE_BUY
        self.SIDE_SELL = SIDE_SELL
        self.ORDER_TYPE_MARKET = ORDER_TYPE_MARKET
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° crypto balance
        self.base_currency = self.symbol[:-4]  # ‡πÄ‡∏ä‡πà‡∏ô BTC ‡∏à‡∏≤‡∏Å BTCUSDT
        self.quote_currency = self.symbol[-4:]  # ‡πÄ‡∏ä‡πà‡∏ô USDT ‡∏à‡∏≤‡∏Å BTCUSDT
        self.base_balance = 0  # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô crypto ‡∏ó‡∏µ‡πà‡∏ñ‡∏∑‡∏≠‡∏Ñ‡∏£‡∏≠‡∏á
        
        self.models_dir = pathlib.Path('models')
        self.models_dir.mkdir(exist_ok=True)
        
        # ‡πÄ‡∏Å‡πá‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏ô config
        self.models = []
        self.scalers = []
        for i in range(self.num_models):
            model_path = self.models_dir / f'xgboost_{self.symbol}_{self.interval}_{i}.model'
            scaler_path = self.models_dir / f'scaler_{self.symbol}_{self.interval}_{i}.pkl'
            self.models.append(None)
            self.scalers.append(None)
            try:
                if model_path.exists() and scaler_path.exists():
                    model = xgb.XGBClassifier()
                    model.load_model(str(model_path))
                    scaler = joblib.load(scaler_path)
                    self.models[i] = model
                    self.scalers[i] = scaler
            except Exception as e:
                print(f"‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà {i} ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
        
        self.trade_history_path = self.models_dir / f'trade_history_{self.symbol}_{self.interval}.json'
        
        # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î
        self.initial_balance = 0
        self.current_balance = 0
        self.total_trades = 0
        self.winning_trades = 0
        self.total_profit_loss = 0
        self.trade_history = []
        
        print(f"\n{'='*50}")
        print(f"‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ö‡∏≠‡∏ó‡πÄ‡∏ó‡∏£‡∏î {self.symbol} ‡∏ó‡∏µ‡πà {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"Timeframe: {self.interval}")
        print(f"{'='*50}\n")
        
        if self.use_testnet:
            self.client = Client(
                os.getenv('BINANCE_API_KEY'),
                os.getenv('BINANCE_API_SECRET'),
                testnet=True
            )
            print("üîß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Binance Testnet")
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ testnet
            account = self.client.get_account()
            print("\nüìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ Testnet:")
            
            # ‡∏´‡∏≤‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
            quote_currency = self.symbol[len(self.symbol)-4:]  # ‡πÄ‡∏ä‡πà‡∏ô USDT ‡∏à‡∏≤‡∏Å BTCUSDT
            for asset in account['balances']:
                if float(asset['free']) > 0 or float(asset['locked']) > 0:
                    print(f"üí∞ ‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå: {asset['asset']}")
                    print(f"   ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ: {asset['free']}")
                    print(f"   ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Ñ: {asset['locked']}\n")
                    if asset['asset'] == quote_currency:
                        self.initial_balance = float(asset['free']) + float(asset['locked'])
                        self.current_balance = self.initial_balance
            
            print(f"\nüíµ ‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: {self.initial_balance:.2f} {quote_currency}")
        else:
            self.client = Client(
                os.getenv('BINANCE_API_KEY'),
                os.getenv('BINANCE_API_SECRET')
            )
            print("‚ö†Ô∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Binance Production API - ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ß‡∏±‡∏á!")
        
        # ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡πÄ‡∏Å‡πà‡∏≤
        self.clear_trade_history()
        
        self.load_trade_history()
        
    def get_historical_data(self):
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á"""
        lookback_days = CONFIG['model']['lookback_days']
        print(f"\nüìà ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á {lookback_days} ‡∏ß‡∏±‡∏ô...")
        end_time = datetime.now()
        start_time = end_time - timedelta(days=lookback_days)
        
        klines = self.client.get_historical_klines(
            self.symbol,
            self.interval,
            start_time.strftime("%d %b %Y %H:%M:%S"),
            end_time.strftime("%d %b %Y %H:%M:%S")
        )
        
        df = pd.DataFrame(klines, columns=[
            'timestamp', 'open', 'high', 'low', 'close', 'volume',
            'close_time', 'quote_asset_volume', 'number_of_trades',
            'taker_buy_base_asset_volume', 'taker_buy_quote_asset_volume', 'ignore'
        ])
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
        for col in ['open', 'high', 'low', 'close', 'volume']:
            df[col] = pd.to_numeric(df[col], errors='coerce')
        
        print(f"‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {len(df)} ‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô")
        return df
    
    def add_technical_indicators(self, df):
        """‡πÄ‡∏û‡∏¥‡πà‡∏° technical indicators"""
        print("\nüîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Technical Indicators...")
        
        # RSI ‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
        print("   ‚ûï RSI")
        df['RSI_1'] = ta.momentum.RSIIndicator(df['close'], window=1).rsi()
        df['RSI_3'] = ta.momentum.RSIIndicator(df['close'], window=3).rsi()
        
        # MACD
        print("   ‚ûï MACD")
        macd = ta.trend.MACD(df['close'])
        df['MACD'] = macd.macd()
        df['MACD_signal'] = macd.macd_signal()
        df['MACD_diff'] = macd.macd_diff()

        # Bollinger Bands
        print("   ‚ûï Bollinger Bands")
        bollinger = ta.volatility.BollingerBands(df['close'], window=20)  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô window=20 ‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô
        df['BB_high_1'] = bollinger.bollinger_hband()
        df['BB_low_1'] = bollinger.bollinger_lband()
        df['BB_mid_1'] = bollinger.bollinger_mavg()
        df['BB_width_1'] = (df['BB_high_1'] - df['BB_low_1']) / df['BB_mid_1']
        
        # Moving Averages ‡∏£‡∏∞‡∏¢‡∏∞‡∏™‡∏±‡πâ‡∏ô
        print("   ‚ûï Moving Averages")
        df['SMA_1'] = ta.trend.sma_indicator(df['close'], window=1)
        df['SMA_3'] = ta.trend.sma_indicator(df['close'], window=3)
        df['EMA_1'] = ta.trend.ema_indicator(df['close'], window=1)
        df['EMA_3'] = ta.trend.ema_indicator(df['close'], window=3)
        
        # Stochastic Oscillator
        print("   ‚ûï Stochastic")
        stoch = ta.momentum.StochasticOscillator(df['high'], df['low'], df['close'], window=3, smooth_window=2)
        df['STOCH_k'] = stoch.stoch()
        df['STOCH_d'] = stoch.stoch_signal()
        
        # ATR (Average True Range)
        print("   ‚ûï ATR")
        df['ATR'] = ta.volatility.AverageTrueRange(df['high'], df['low'], df['close']).average_true_range()

        # ROC (Rate of Change)
        print("   ‚ûï ROC")
        df['ROC'] = ta.momentum.ROCIndicator(df['close'], window=1).roc()

        # Volume Indicators
        print("   ‚ûï Volume Indicators")
        df['OBV'] = ta.volume.OnBalanceVolumeIndicator(df['close'], df['volume']).on_balance_volume()

        # VWAP (Volume Weighted Average Price)
        print("   ‚ûï VWAP")
        df['VWAP'] = (df['volume'] * (df['high'] + df['low'] + df['close']) / 3).cumsum() / df['volume'].cumsum()
        
        # Bid-Ask Spread (‡∏à‡∏≥‡∏•‡∏≠‡∏á)
        df['Bid_Ask_Spread'] = df['high'] - df['low']

        # Order Book Imbalance (‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢)
        df['Order_Book_Imbalance'] = (df['volume'] - df['volume'].rolling(window=3, min_periods=1).mean()) / df['volume'].rolling(window=3,min_periods=1).std()

        # Time of Day (0-23)
        df['time_of_day'] = pd.to_datetime(df['timestamp']).dt.hour

        print("‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Technical Indicators ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
        return df
    
    def prepare_features(self, df):
        """‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° features ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•"""
        print("\nüîß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•...")
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° technical indicators
        df = self.add_technical_indicators(df)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á target variable (1 ‡∏ñ‡πâ‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô, 0 ‡∏ñ‡πâ‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤‡∏•‡∏á)
        df['target'] = (df['close'].shift(-1) > df['close']).astype(int)
        
        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å features ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ
        feature_columns = [
            'open', 'high', 'low', 'close', 'volume',
            'RSI_1', 'RSI_3',  # ‡∏•‡∏î RSI_21 ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ä‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡πÄ‡∏û‡∏¥‡πà‡∏° RSI_10 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
            'MACD', 'MACD_signal', 'MACD_diff',
            'BB_high_1', 'BB_low_1', 'BB_mid_1', 'BB_width_1',  # ‡∏•‡∏î‡∏à‡∏≤‡∏Å 20 period ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 3
            'SMA_1', 'SMA_3', 'EMA_1', 'EMA_3',  # ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà SMA_20/50, EMA_20/50 ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡∏™‡∏±‡πâ‡∏ô
            'STOCH_k', 'STOCH_d',
            'ATR', 'ROC', 'OBV',
            'VWAP',  # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢
            'Bid_Ask_Spread',  # ‡∏ß‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∂‡∏Å‡∏Ç‡∏≠‡∏á‡∏ï‡∏•‡∏≤‡∏î
            'Order_Book_Imbalance',  # ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ù‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Å‡∏±‡∏ö‡∏ù‡∏±‡πà‡∏á‡∏Ç‡∏≤‡∏¢
            'time_of_day'  # ‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô ‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏ä‡πâ‡∏≤ ‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á ‡∏ö‡πà‡∏≤‡∏¢ ‡∏î‡∏∂‡∏Å
        ]
        
        # ‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ NaN
        df = df.dropna()
        
        X = df[feature_columns]
        y = df['target']
        
        print(f"‚úÖ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: {len(X)} ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á, {len(feature_columns)} features")
        return X, y
    
    def save_model(self):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏•‡∏∞ scaler ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå"""
        for i in range(self.num_models):
            if self.models[i] is not None and self.scalers[i] is not None:
                model_path = self.models_dir / f'xgboost_{self.symbol}_{self.interval}_{i}.model'
                scaler_path = self.models_dir / f'scaler_{self.symbol}_{self.interval}_{i}.pkl'
                self.models[i].save_model(str(model_path))
                joblib.dump(self.scalers[i], scaler_path)
        print("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
    
    def load_model(self):
        """‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏•‡∏∞ scaler ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå"""
        try:
            if self.model_path.exists() and self.scaler_path.exists():
                print("\nüìÇ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ...")
                self.model = xgb.XGBClassifier()
                self.model.load_model(str(self.model_path))
                self.scaler = joblib.load(self.scaler_path)
                print("‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                return True
        except Exception as e:
            print(f"‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
        return False

    def save_trade_history(self):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î"""
        trade_data = {
            'initial_balance': self.initial_balance,
            'current_balance': self.current_balance,
            'total_trades': self.total_trades,
            'winning_trades': self.winning_trades,
            'total_profit_loss': self.total_profit_loss,
            'trade_history': self.trade_history
        }
        
        with open(self.trade_history_path, 'w') as f:
            json.dump(trade_data, f, indent=4)
    
    def load_trade_history(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î"""
        try:
            if self.trade_history_path.exists():
                with open(self.trade_history_path, 'r') as f:
                    trade_data = json.load(f)
                    self.initial_balance = trade_data['initial_balance']
                    self.current_balance = trade_data['current_balance']
                    self.total_trades = trade_data['total_trades']
                    self.winning_trades = trade_data['winning_trades']
                    self.total_profit_loss = trade_data['total_profit_loss']
                    self.trade_history = trade_data['trade_history']
                print("\nüìà ‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                self.print_trading_summary()
        except Exception as e:
            print(f"‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
    
    def print_trading_summary(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î"""
        quote_currency = self.symbol[len(self.symbol)-4:]
        
        # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏à‡∏≤‡∏Å trade_history
        buy_trades = len([t for t in self.trade_history if t['type'] == 'BUY'])
        sell_trades = len([t for t in self.trade_history if t['type'] == 'SELL'])
        self.total_trades = min(buy_trades, sell_trades)  # ‡∏ô‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏π‡πà (‡∏ã‡∏∑‡πâ‡∏≠-‡∏Ç‡∏≤‡∏¢)
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì win rate
        win_rate = (self.winning_trades / self.total_trades * 100) if self.total_trades > 0 else 0
        losing_trades = self.total_trades - self.winning_trades
        
        print("\nüìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î:")
        print(f"   üí∞ ‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: {self.initial_balance:.2f} {quote_currency}")
        print(f"   üíµ ‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {self.current_balance:.2f} {quote_currency}")
        print(f"   üìà ‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏°: {self.total_profit_loss:.2f} {quote_currency} ({((self.current_balance/self.initial_balance)-1)*100:.2f}%)")
        print(f"   üéØ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ó‡∏£‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {buy_trades} ‡∏ã‡∏∑‡πâ‡∏≠, {sell_trades} ‡∏Ç‡∏≤‡∏¢")
        print(f"   ‚úÖ ‡πÄ‡∏ó‡∏£‡∏î‡∏Å‡∏≥‡πÑ‡∏£: {self.winning_trades} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
        print(f"   ‚ùå ‡πÄ‡∏ó‡∏£‡∏î‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô: {losing_trades} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
        print(f"   üìä Win Rate: {win_rate:.2f}%")

    def train_model(self, X, y, force_train=False):
        """‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏• XGBoost ‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"""
        if all(model is not None for model in self.models) and not force_train:
            print("\n‚úÖ ‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà")
            return

        print(f"\nü§ñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏• XGBoost {self.num_models} ‡∏ï‡∏±‡∏ß...")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á XGBoost parameters ‡∏à‡∏≤‡∏Å config
        xgb_params = {
            'n_estimators': CONFIG['xgboost_params']['n_estimators'],
            'max_depth': CONFIG['xgboost_params']['max_depth'],
            'learning_rate': CONFIG['xgboost_params']['learning_rate'],
            'objective': CONFIG['xgboost_params']['objective'],
            'eval_metric': CONFIG['xgboost_params']['eval_metric'],
            'subsample': CONFIG['xgboost_params']['subsample'],
            'colsample_bytree': CONFIG['xgboost_params']['colsample_bytree'],
            'min_child_weight': CONFIG['xgboost_params']['min_child_weight'],
            'gamma': CONFIG['xgboost_params']['gamma']
        }
        
        for i in range(self.num_models):
            print(f"\n‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà {i+1}/{self.num_models}")
            X_train, X_test, y_train, y_test = train_test_split(
                X, y, 
                test_size=CONFIG['model']['test_size'],
                random_state=CONFIG['model']['random_state'] + i
            )
            
            # Scale features
            if self.scalers[i] is None:
                self.scalers[i] = StandardScaler()
            X_train_scaled = self.scalers[i].fit_transform(X_train)
            X_test_scaled = self.scalers[i].transform(X_test)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏î‡πâ‡∏ß‡∏¢‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏à‡∏≤‡∏Å config
            self.models[i] = xgb.XGBClassifier(**xgb_params)
            
            # ‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏î‡πâ‡∏ß‡∏¢ early stopping ‡∏à‡∏≤‡∏Å config
            early_stopping = CONFIG['xgboost_params'].get('early_stopping_rounds', 25)
            print(f"   ‚è≥ Early stopping rounds: {early_stopping}")
            
            self.models[i].fit(
                X_train_scaled, y_train,
                eval_set=[(X_test_scaled, y_test)],
                early_stopping_rounds=early_stopping,
                verbose=False
            )
            
            # ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•‡πÇ‡∏°‡πÄ‡∏î‡∏•
            train_score = self.models[i].score(X_train_scaled, y_train)
            test_score = self.models[i].score(X_test_scaled, y_test)
            print(f"   Model {i+1} - Train accuracy: {train_score:.4f}, Test accuracy: {test_score:.4f}")
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•
        self.save_model()
        print("\n‚ú® ‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô - ‡πÉ‡∏ä‡πâ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
    
    def predict_next_movement(self, current_data):
        """‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏≤‡∏¢‡πÇ‡∏°‡πÄ‡∏î‡∏•"""
        if not all(model is not None for model in self.models):
            raise Exception("‚ùå ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡πÄ‡∏ó‡∏£‡∏ô‡∏Ñ‡∏£‡∏ö")
        
        predictions = []
        probabilities = []
        
        for i in range(self.num_models):
            # Scale features
            scaled_data = self.scalers[i].transform(current_data)
            
            # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
            pred = self.models[i].predict(scaled_data)
            prob = self.models[i].predict_proba(scaled_data)
            
            predictions.append(pred[0])
            probabilities.append(prob[0])
        
        # ‡πÉ‡∏ä‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏ç‡πà‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à
        predictions = np.array(predictions)
        counts = np.bincount(predictions)
        final_prediction = np.argmax(counts)
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏à‡∏≤‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö final_prediction
        matching_probabilities = []
        for i, pred in enumerate(predictions):
            if pred == final_prediction:
                matching_probabilities.append(probabilities[i][final_prediction])
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à
        avg_confidence = np.mean(matching_probabilities)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á array ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏•‡∏≤‡∏™ (2)
        avg_probability = np.zeros(2)
        avg_probability[final_prediction] = avg_confidence
        avg_probability[1 - final_prediction] = 1 - avg_confidence
        
        return final_prediction, avg_probability
    
    def execute_trade(self, prediction, probability, quantity):
        """‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢"""
        buy_threshold = CONFIG['trading']['buy_threshold']
        sell_threshold = CONFIG['trading']['sell_threshold']
        
        print(f"\nüéØ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢:")
        print(f"   ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á: {'‡∏Ç‡∏∂‡πâ‡∏ô ‚¨ÜÔ∏è' if prediction == 1 else '‡∏•‡∏á ‚¨áÔ∏è'}")
        print(f"   ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à: {probability[prediction] * 100:.2f}%")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        has_open_trade = any(trade.get('is_open', False) for trade in self.trade_history)
        
        if prediction == 1 and probability[prediction] > buy_threshold:
            # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠
            if has_open_trade:
                print("\n‚ö†Ô∏è ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠‡∏Ç‡∏≤‡∏¢‡∏Å‡πà‡∏≠‡∏ô")
                return
                
            print(f"\nüü¢ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ {quantity} {self.symbol}")
            try:
                # ‡πÄ‡∏õ‡∏¥‡∏î order ‡∏ã‡∏∑‡πâ‡∏≠
                order = self.client.create_order(
                    symbol=self.symbol,
                    side=self.SIDE_BUY,
                    type=self.ORDER_TYPE_MARKET,
                    quantity=quantity
                )
                
                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏ã‡∏∑‡πâ‡∏≠
                entry_price = float(order['fills'][0]['price'])
                
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô/crypto
                trade_value = entry_price * quantity
                self.current_balance -= trade_value  # ‡∏´‡∏±‡∏Å‡πÄ‡∏á‡∏¥‡∏ô USDT
                self.base_balance += quantity  # ‡πÄ‡∏û‡∏¥‡πà‡∏° crypto
                
                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î
                trade_info = {
                    'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                    'type': 'BUY',
                    'price': entry_price,
                    'quantity': quantity,
                    'value': trade_value,
                    'balance': self.current_balance,
                    'crypto_balance': self.base_balance,
                    'prediction': '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏∞‡∏Ç‡∏∂‡πâ‡∏ô',
                    'confidence': probability[prediction] * 100,
                    'is_open': True,
                    'order_id': order['orderId']
                }
                self.trade_history.append(trade_info)
                self.save_trade_history()
                
                print(f"‚úÖ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏Ñ‡∏≤ {entry_price:.2f} {self.quote_currency}")
                print(f"üíµ ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î: {trade_value:.2f} {self.quote_currency}")
                print(f"üí∞ ‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: {self.current_balance:.2f} {self.quote_currency}")
                print(f"ü™ô {self.base_currency} ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: {self.base_balance:.8f}")
                
            except Exception as e:
                print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠: {str(e)}")
            
        elif prediction == 0 and probability[prediction] > sell_threshold:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if not has_open_trade:
                print("\n‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà")
                return
                
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ crypto ‡∏û‡∏≠‡∏Ç‡∏≤‡∏¢‡πÑ‡∏´‡∏°
            if self.base_balance < quantity:
                print(f"\n‚ö†Ô∏è ‡∏°‡∏µ {self.base_currency} ‡πÑ‡∏°‡πà‡∏û‡∏≠‡∏Ç‡∏≤‡∏¢ (‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ {quantity}, ‡∏°‡∏µ {self.base_balance})")
                return
                
            print(f"\nüî¥ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ç‡∏≤‡∏¢ {quantity} {self.symbol}")
            try:
                # ‡πÄ‡∏õ‡∏¥‡∏î order ‡∏Ç‡∏≤‡∏¢
                order = self.client.create_order(
                    symbol=self.symbol,
                    side=self.SIDE_SELL,
                    type=self.ORDER_TYPE_MARKET,
                    quantity=quantity
                )
                
                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢
                exit_price = float(order['fills'][0]['price'])
            
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô/crypto
                trade_value = exit_price * quantity
                self.current_balance += trade_value  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏¥‡∏ô USDT
                self.base_balance -= quantity  # ‡∏•‡∏î crypto
                
                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î
                # ‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
                open_trade = next((trade for trade in reversed(self.trade_history) if trade.get('is_open', False)), None)
                if open_trade:
                    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô
                    entry_value = open_trade['price'] * quantity
                    profit_loss = trade_value - entry_value
                    
                    trade_info = {
                        'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                        'type': 'SELL',
                        'price': exit_price,
                        'quantity': quantity,
                        'value': trade_value,
                        'balance': self.current_balance,
                        'crypto_balance': self.base_balance,
                        'prediction': '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏∞‡∏•‡∏á',
                        'confidence': probability[prediction] * 100,
                        'is_open': False,
                        'entry_price': open_trade['price'],
                        'profit_loss': profit_loss,
                        'order_id': order['orderId']
                    }
                    self.trade_history.append(trade_info)
                    
                    # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î
                    self.total_trades += 1
                    if profit_loss > 0:
                        self.winning_trades += 1
                    self.total_profit_loss += profit_loss
                    
                    # ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà
                    open_trade['is_open'] = False
                    
                    self.save_trade_history()
                    
                    print(f"‚úÖ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ç‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏Ñ‡∏≤ {exit_price:.2f} {self.quote_currency}")
                    print(f"üíµ ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î: {trade_value:.2f} {self.quote_currency}")
                    print(f"üìä ‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô: {profit_loss:.2f} {self.quote_currency}")
                    print(f"üí∞ ‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: {self.current_balance:.2f} {self.quote_currency}")
                    print(f"ü™ô {self.base_currency} ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: {self.base_balance:.8f}")
                
            except Exception as e:
                print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢: {str(e)}")
        else:
            print("\n‚ö™Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ threshold)")
    
    def run(self):
        """‡∏£‡∏±‡∏ô‡∏ö‡∏≠‡∏ó‡πÄ‡∏ó‡∏£‡∏î"""
        trade_quantity = CONFIG['trading']['trade_quantity']
        retrain_every_n_cycles = CONFIG['model']['retrain_every_n_cycles']
        trade_interval = CONFIG['trading']['trade_interval']
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠‡∏à‡∏≤‡∏Å trade_interval
        trade_interval_time = 60  # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô 1 ‡∏ô‡∏≤‡∏ó‡∏µ
        if trade_interval.endswith('s'):
            trade_interval_time = int(trade_interval[:-1])
        elif trade_interval.endswith('m'):
            trade_interval_time = int(trade_interval[:-1]) * 60
        elif trade_interval.endswith('h'):
            trade_interval_time = int(trade_interval[:-1]) * 60 * 60
        
        print(f"\nüöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ö‡∏≠‡∏ó‡πÄ‡∏ó‡∏£‡∏î...")
        print(f"   ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏ï‡πà‡∏≠‡∏Ñ‡∏£‡∏±‡πâ‡∏á: {trade_quantity} {self.symbol}")
        print(f"   ‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å {retrain_every_n_cycles} ‡∏ô‡∏≤‡∏ó‡∏µ")
        print(f"   ‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î: ‡∏ó‡∏∏‡∏Å {trade_interval}")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°
        self.print_trading_summary()
        
        cycle = 1
        while True:
            try:
                print(f"\n{'='*50}")
                print(f"üìç ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà {cycle} - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
                print(f"{'='*50}")
                
                # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•
                df = self.get_historical_data()
                X, y = self.prepare_features(df)
                
                # ‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å N ‡∏£‡∏≠‡∏ö
                force_train = (cycle % retrain_every_n_cycles) == 0
                if force_train:
                    print("\nüîÑ ‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏´‡∏°‡πà")
                self.train_model(X, y, force_train=force_train)
                
                # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
                current_data = X.iloc[-1:].copy()
                
                # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏£‡∏î
                prediction, probability = self.predict_next_movement(current_data)
                self.execute_trade(prediction, probability, trade_quantity)
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏ó‡∏∏‡∏Å 10 ‡∏£‡∏≠‡∏ö
                if cycle % 10 == 0:
                    self.print_trading_summary()
                
                cycle += 1
                time.sleep(trade_interval_time)
                
            except Exception as e:
                print(f"\n‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
                time.sleep(trade_interval_time)
                continue

    def clear_trade_history(self):
        """‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        print("\nüóëÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î...")
        self.total_trades = 0
        self.winning_trades = 0
        self.total_profit_loss = 0
        self.trade_history = []
        self.save_trade_history()
        print("‚úÖ ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")

if __name__ == "__main__":
    bot = TradingBot()
    bot.run() 